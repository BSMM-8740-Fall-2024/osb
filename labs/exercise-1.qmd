---
title: "exercise-1.qmd"
author: "LLO"
reference-location: margin
---

Exercise: Exploratory Data Analysis with Tidymodels using tidy, dplyr, and purrr

In this exercise, you will perform exploratory data analysis on a dataset using the tidymodels ecosystem in R. You'll use the tidy, dplyr, and purrr packages to clean, explore, and summarize the data. The dataset used in this exercise is the famous Iris dataset, which contains measurements of different iris flower species.

Step 1: Load the required libraries and dataset

```{r}
#| echo: true
#| message: false
# Load the required libraries
# library(tidymodels)
# library(dplyr)
# library(purrr)
require(magrittr)
require(ggplot2)

# Load the Iris dataset
utils::data("iris", package = 'datasets')
```

Step 2: Explore the dataset

```{r}
# Task 1: Check the structure of the dataset (data types, variable names, etc.)
iris %>% str()
```

```{r}
# Task 2: Display the first few rows of the dataset
iris %>% head()
```

```{r}
# Task 3: Check for missing values in the dataset
iris %>% purrr::map_lgl(~any(is.na(.)))
```

Step 3: Data Cleaning

```{r}
# Task 4: Remove any rows with missing values (NA) from the dataset
cleaned_iris <- iris %>%
  tidyr::drop_na()
```

Step 4: Data Summarization and Visualization

```{r}
# Task 5: Generate a summary of numerical variables (mean, median, min, max, etc.)
summary_stats <- cleaned_iris %>%
  dplyr::select_if(is.numeric) %>%
  purrr::map(summary)

# Task 6: Create a scatterplot matrix to visualize relationships between numerical variables
scatterplot_matrix <- cleaned_iris %>%
  dplyr::select_if(is.numeric) %>%
  GGally::ggpairs()

# Task 7: Create a boxplot to compare the distribution of numerical variables across species
boxplot_species <- cleaned_iris %>%
  tidyr::pivot_longer(cols = starts_with("Sepal") | starts_with("Petal"),
               names_to = "Measurement", values_to = "Value") %>%
  ggplot(aes(x = Species, y = Value, fill = Species)) +
  geom_boxplot() +
  labs(title = "Boxplot - Comparison of Measurements across Species")

# Task 8: Create a bar plot to visualize the distribution of flower species
barplot_species <- cleaned_iris %>%
  dplyr::count(Species) %>%
  ggplot(aes(x = Species, y = n, fill = Species)) +
  geom_bar(stat = "identity") +
  labs(title = "Bar Plot - Distribution of Flower Species")
```

Step 5: Putting it all together

```{r}
# Task 9: Create a function to perform all the tasks above and return the visualizations
perform_exploratory_analysis <- function(data) {
  utils::str(data)
  dplyr::slice_head(data, n=6)
  purrr::map_lgl(data, ~any(is.na(.)))
  cleaned_data <- data %>%
    tidyr::drop_na()

  summary_stats <- cleaned_data %>%
    dplyr::select_if(is.numeric) %>%
    purrr::map(summary)

  scatterplot_matrix <- cleaned_data %>%
    dplyr::select_if(is.numeric) %>%
    GGally::ggpairs()

  boxplot_species <- cleaned_data %>%
    tidyr::pivot_longer(cols = starts_with("Sepal") | starts_with("Petal"),
                 names_to = "Measurement", values_to = "Value") %>%
    ggplot(aes(x = Species, y = Value, fill = Species)) +
    geom_boxplot() +
    labs(title = "Boxplot - Comparison of Measurements across Species")

  barplot_species <- cleaned_data %>%
    dplyr::count(Species) %>%
    ggplot(aes(x = Species, y = n, fill = Species)) +
    geom_bar(stat = "identity") +
    labs(title = "Bar Plot - Distribution of Flower Species")

  return(list(
    "summary_stats" = summary_stats,
    "scatterplot_matrix" = scatterplot_matrix,
    "boxplot_species" = boxplot_species,
    "barplot_species" = barplot_species
  ))
}

# Task 10: Call the function with the Iris dataset
exploratory_analysis_results <- perform_exploratory_analysis(iris)
```
