---
title: "Lab 1 - Tidy Data Wrangling"
subtitle: "SOLUTIONS"
editor: visual
format: html
self-contained: true
# reference-location: margin
# pdf-engine: pdflatex
---

```{r}
#| label: load packages
#| echo: false
#| message: false
#| warning: false

# check if 'librarian' is installed and if not, install it
if (! "librarian" %in% rownames(installed.packages()) ){
  install.packages("librarian")
}
  
# load packages if not already loaded
librarian::shelf(Lahman, magrittr, tidyverse, gt, gtExtras, tidymodels)
```

## Data: Yearly statistics and standings for baseball teams

Today's data is all baseball statistics. The data is in the `Lahman` package.

### View the data

Before doing any analysis, you will want to get quick view of the data. This is useful as part of the EDA process.

```{r}
dim(Teams)
```

## Data dictionary

The variable definitions are found in the help for Teams, and are listed below.

```{r}
?Teams
```

::: {style="font-size: 12px"}
| Column         | Description                                    |
|----------------|------------------------------------------------|
| yearID         | Year                                           |
| lgID           | League; a factor with levels AA AL FL NL PL UA |
| teamID         | Team; a factor                                 |
| franchID       | Franchise (links to TeamsFranchises table)     |
| divID          | Team's division; a factor with levels C E W    |
| Rank           | Position in final standings                    |
| G              | Games played                                   |
| Ghome          | Games played at home                           |
| W              | Wins                                           |
| L              | Losses                                         |
| DivWin         | Division Winner (Y or N)                       |
| WCWin          | Wild Card Winner (Y or N)                      |
| LgWin          | League Champion(Y or N)                        |
| WSWin          | World Series Winner (Y or N)                   |
| R              | Runs scored                                    |
| AB             | At bats                                        |
| H              | Hits by batters                                |
| X2B            | Doubles                                        |
| X3B            | Triples                                        |
| HR             | Homeruns by batters                            |
| BB             | Walks by batters                               |
| SO             | Strikeouts by batters                          |
| SB             | Stolen bases                                   |
| CS             | Caught stealing                                |
| HBP            | Batters hit by pitch                           |
| SF             | Sacrifice flies                                |
| RA             | Opponents runs scored                          |
| ER             | Earned runs allowed                            |
| ERA            | Earned run average                             |
| CG             | Complete games                                 |
| SHO            | Shutouts                                       |
| SV             | Saves                                          |
| IPouts         | Outs Pitched (innings pitched x 3)             |
| HA             | Hits allowed                                   |
| HRA            | Homeruns allowed                               |
| BBA            | Walks allowed                                  |
| SOA            | Strikeouts by pitchers                         |
| E              | Errors                                         |
| DP             | Double Plays                                   |
| FP             | Fielding percentage                            |
| name           | Team's full name                               |
| park           | Name of team's home ballpark                   |
| attendance     | Home attendance total                          |
| BPF            | Three-year park factor for batters             |
| PPF            | Three-year park factor for pitchers            |
| teamIDBR       | Team ID used by Baseball Reference website     |
| teamIDlahman45 | Team ID used in Lahman database version 4.5    |
| teamIDretro    | Team ID used by Retrosheet                     |
:::

### Exercises

### Exercise 1

How many observations are in the `Teams` dataset? How many variables?

```{r}
# take the first three rows and glimpse the data
Teams |> dplyr::slice_head(n=3) |> dplyr::glimpse()
```

How many character columns/measurements have missing variables?

```{r}
Teams |> skimr::skim()
```

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION

From the `dim(Teams)` statement used after `library(Lahman)`, there are 3015 observations and 48 variables.

From Teams \|\> skimr::skim() 6 of 10 character variables have missing values
:::

### Exercise 2

[Ben Baumer](#0) worked for the [New York Mets](#0) from 2004 to 2012. What was the team W/L record during those years? Use `filter()` and `select()` to quickly identify only those pieces of information that we care about.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
# filter to use only rows where teamID equals "NYN"
mets <- Teams  %>% 
  dplyr::filter(teamID == "NYN")
# filter to use only rows where yearID is >= 2004 and <= 2012
# you could also write dplyr::filter(yearID  %in% 2004:2012)
my_mets <- mets %>% 
  dplyr::filter(yearID >= 2004 & yearID <= 2012)
# the dataset needs to have at least the year and the won (W) loss (L) record for that year
my_mets %>% 
  dplyr::select(teamID,yearID,W,L)
```

Overall, the won-loss record was as follows:

```{r}
my_mets %>% 
  dplyr::select(teamID,yearID,W,L) %>% 
  dplyr::summarize(
    "2004-2012 wins" = sum(W)
    , "2004-2012 losses" = sum(L)
  )
```
:::

### Exercise 3

The model estimates the expected winning percentage as follows:

$$
\hat{\text{W}}_{\text{pct}}=\frac{1}{1+\left(\frac{\text{RA}}{\text{RS}}\right)^{2}}
$$

where $\text{RA}$ is the number of runs the team allows to be scored, $\text{RS}$ is the number of runs that the team scores, and $\hat{\text{W}}_{\text{pct}}$ is the team's expected winning percentage. The runs scored and allowed are present in the `Teams` table, so we start by selecting them.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
mets_ben <- Teams |>
  # select to get the columns you want
  dplyr::select(teamID, yearID, W, L, R, RA) |>
  # filter to get the rows you want
  dplyr::filter(teamID == "NYN" & yearID %in% 2004:2012)
```

The column name can be changed with the dplyr::rename function (Use `new_name = old_name` to rename selected variables). Alternatively, you can rename the column directly in the select statement above, like this:

`dplyr::select(teamID,yearID,W,L,RS = R,RA)`

```{r}
mets_ben <- mets_ben |>
  dplyr::rename(RS = R)    # new name = old name
mets_ben
```
:::

### Exercise 4

Next, we need to compute the team's actual winning percentage in each of these seasons. Thus, we need to add a new column to our data frame, and we do this with the `mutate()` command.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
mets_ben <- mets_ben |>
  # once we have the data, we mutate to add a new value (column), using the formula
  dplyr::mutate( WPct = 1/(1 + (RA/RS)^2 ) )
mets_ben
```
:::

The expected number of wins is then equal to the product of the expected winning percentage times the number of games.

```{r}
mets_ben <- mets_ben |>
  # once we have calculated the expected winning percentage,
  # the expected number of wins is the percentage times the total number of games played
  dplyr::mutate( W_hat = WPct * (W+L) )
mets_ben
```

### Exercise 5

In this case, the Mets' fortunes were better than expected in three of these seasons, and worse than expected in the other six.

We can confirm this as follows:

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
mets_ben %>% 
  # first check that the assertion above is correct
  dplyr::summarize('better then expected' = sum(W >= W_hat), 'worse than expected' = sum(W < W_hat))
```

To see how the Mets did over all seasons we can repeat our calculation

```{r}
Teams |>
  # here we repeat our prior calculation (all steps combined) for all the years in the dataset
  dplyr::select(teamID, yearID, W, L, RS = R, RA) |>
  dplyr::filter(teamID == "NYN") |>
  dplyr::mutate( 
    WPct = 1/(1 + (RA/RS)^2 )
    , W_hat = WPct * (W+L)
  )  |> 
dplyr::summarize( 
  "better then expected" = sum(W >= W_hat)
  , 'worse than expected' = sum(W < W_hat) 
)
```
:::

### Exercise 6

Naturally, the Mets experienced ups and downs during Ben's time with the team. Which seasons were best? To figure this out, we can simply sort the rows of the data frame by number of wins.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
# for this we just need to sort the number of wins in descending order
mets_ben |> dplyr::arrange(desc(W))
```
:::

### Exercise 7

In 2006, the Mets had the best record in baseball during the regular season and nearly made the [*World Series*](#0). How do these seasons rank in terms of the team's performance relative to our model?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
mets_ben %>% 
  # add a column with the difference between wins (W) and expected wins (W_hat)
  dplyr::mutate(Diff = W - W_hat) |>
  # then sort the result
  dplyr::arrange(desc(Diff))
```

In the years 2006, 2007 and 2012, the Mets had more wins than expected by the model. In all other seasons they performed worse than predicted by the model.
:::

### Exercise 8

We can summarize the Mets performance as follows:

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
mets_ben |>
  dplyr::summarize(
    num_years = dplyr::n(),  # number of years
    total_W = sum(W),        # total number of wins
    total_L = sum(L),        # total number of losses
    total_WPct = total_W / (total_W + total_L) # win percentage
  )
```

In these nine years, the Mets had a combined record of 728 wins and 730 losses, for an overall winning percentage of 49.93%.
:::

### Exercise 9

Discretize the years into three chunks: one for each of the three general managers under whom Ben worked. [Jim Duquette](https://en.wikipedia.org/w/index.php?search=Jim%20Duquette) was the Mets' [*general manager*](https://en.wikipedia.org/w/index.php?search=general%20manager) in 2004, [Omar Minaya](https://en.wikipedia.org/w/index.php?search=Omar%20Minaya) from 2005 to 2010, and [Sandy Alderson](https://en.wikipedia.org/w/index.php?search=Sandy%20Alderson) from 2011 to 2012.

```{r}
mets_ben %>% 
  # this questions requires a logic for deciding 
  # which years each general manager worked
  dplyr::mutate(
    # nested ifelse statements are OK for this logic, 
    # but are only practical for about three cases
    gm = ifelse(
      yearID == 2004, 
      'Jim Duquette', 
      ifelse(
        yearID >= 2011, 
        'Sandy Alderson', 
        'Omar Minaya')
    )
  )
```

Alternatively, we can use the `case_when` function

```{r}
mets_ben <- mets_ben |>
  dplyr::mutate(
    # same problem, but case_when is easier to work with
    gm = dplyr::case_when(
      yearID == 2004 ~ 'Jim Duquette', 
      yearID >= 2011 ~ 'Sandy Alderson', 
      TRUE ~ 'Omar Minaya' # this is the default case
    )
  )
mets_ben
```

### Exercise 10

Use the `gm` function to define the manager groups with the `group_by()` operator, and run the summaries again, this time across the manager groups.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}

#| label: read the data
data <- readr::read_csv(here::here("labs/solutions/data", "sales_dag.csv"), show_col_types = FALSE)

data |> dplyr::slice_head(n=5) |> 
  gt::gt() |> 
  gt::tab_header(title = "sample marketing data") |> 
  gtExtras::gt_theme_espn()
```

```{r}
#| label: run EDA
data |> skimr::skim()

```

The mean of the sales_per_visit columns/measurement is 0.9183 and there are no grouped observations.

```{r}
# calculate the % share of customers receiving a discount vs the % not receiving a discount
data$discount |> table() / length(data$discount)
```

Similarly for the share of customers which are loyal:

```{r}
# calculate the % share of customers that are 'loyal' vs not 'loyal'
data$is_loyal |> table() / length(data$is_loyal)
```

To understand these features better, they also looked at a cross-tab table:

```{r}
# build a cross-tab table of 'loyal' customers vs customers getting a discount
data |> xtabs(~discount + is_loyal, data = _)

```
:::

Alternatively:

```{r}
data |> 
  dplyr::group_by(discount,is_loyal) |> 
  dplyr::summarize(n = dplyr::n(), .groups='drop') |> 
  tidyr::pivot_wider(
    names_from = is_loyal
    , values_from = n
    , names_prefix = 'is_loyal '
  ) |> gt::gt() |> 
  gt::tab_header(title = "Cross-tabs", subtitle = "discount vs is_loyal") |> 
  gtExtras::gt_theme_espn()

data |> dplyr::mutate(id = dplyr::row_number(), .before = 1) |> 
  dplyr::filter(discount == 0) |> 
  dplyr::arrange( desc(sales) ) |> 
  dplyr::slice_head(n=10) |> 
  gt::gt() |> 
  gt::tab_header(title = "Sales: loyal customers vs others") |> 
  gtExtras::gt_theme_espn()
```

The loyal customers are the top ones in terms of sales. This is good news. It means that the definition of loyal customers is consistent with the data.

In order to have orders of magnitude for the sales, the data scientist provided some summary statistics table:

```{r}
#| warning: false
#| message: false
# data["sales"].describe()
gtExtras::gt_plt_summary(data, title = "Sales data")
```

To have a better glimpse of the data, the data scientist also provided a histogram of the sales:

```{r}
#| warning: false
#| message: false
data |> 
  ggplot(aes(x=sales)) +
  geom_histogram(aes(y = ..density..), bins = 30, colour = 1, fill = "white") +
  geom_density(lwd = 1, colour = 4, fill = 4, alpha = 0.25) +
  labs(title = "Sales Distribution") +
  theme_minimal()
```

## Resources for additional practice (optional)

-   [Chapter 2: Get Started](https://socviz.co/gettingstarted.html#work-in-plain-text-using-rmarkdown) *Data Visualization by Kieran Healy*
-   [Chapter 3: Data visualization](https://r4ds.had.co.nz/data-visualisation.html) in *R for Data Science* by Hadley Wickham
-   RStudio Cloud Primers
    -   Visualization Basics: <https://rstudio.cloud/learn/primers/1.1>
    -   Work with Data: <https://rstudio.cloud/learn/primers/2>
    -   Visualize Data: <https://rstudio.cloud/learn/primers/3>
