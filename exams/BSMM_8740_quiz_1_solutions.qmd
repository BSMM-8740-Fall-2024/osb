---
title: "BSMM-quiz-1"
subtitle: "SOLUTIONS"
author: "LLO"
date: "Add the date here"
editor: visual
format: html
self-contained: true
---

# Instructions

```{r}
#| echo: false
#| message: false
#| warning: false
require(magrittr)
require(ggplot2)
```

## Overview

Quiz 1 will be released on Monday, October 2, and is designed to be completed in 30 minutes.

The exam will consist of two parts:

1.  **Part 1 - Conceptual:** Simple questions designed to evaluate your familiarity with the written course notes.
2.  **Part 2 - Applied:** Data analysis in RStudio (like a usual lab, but simpler).

Go to the [GitHub organization](https://github.com/bsmm-8740-fall-2023) for the course and find the **quiz-1-\[your github username\]** repo to complete the quiz. Add your answers by editing the `quiz-1.qmd` file in your repository.

üçÄ Good luck! üçÄ

## Academic Integrity

By taking this exam, you pledge to that:

-   I will not lie, cheat, or steal in my academic endeavors;

-   I will conduct myself honorably in all my endeavors; and

-   I will act if the Standard is compromised.

## Rules & Notes

-   This is an individual assignment. Everything in your repository is for your eyes only.

-   You may not collaborate or communicate anything about this exam to **anyone** except the instructor. For example, you may not communicate with other students or post/solicit help on the internet, email or via any other method of communication.

-   The exam is open-book, open-note, so you may use any materials from class as you take the exam.

## Submission

-   Your answers should be typed in the document below

-   Make sure you commit any changes to the document and push the changes to the course repository before he end of the quiz.

-   Once the quiz has ended, the contents of your repository will be pulled for grading. This will happen only once, so no changes made after the end of the quiz will be recorded.

------------------------------------------------------------------------

# Quiz-1 (part 1)

## Q-1

Is this data a `tidy` dataset?

| Region    | \< \$1M | \$1 - \$5M | \$5 - \$10M | \$10 - \$100M | \> \$100M |
|-----------|---------|------------|-------------|---------------|-----------|
| N America | \$50M   | \$324M     | \$1045M     | \$941M        | \$1200M   |
| EMEA      | \$10M   | \$121M     | \$77M       | \$80M         | \$0M      |

*Delete the wrong answer:*

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: the answer is No

The category names appear as column names, while the values are spread out across the tables. The Tidy version would have just two columns - Region and income_band. The is could be achieved by transforming the table using `tidyr::pivot_longer()`
:::

-   Yes
-   No

## Q-2

Which `dlpyr::` function possibly reduces the number of rows in a dataset? *Delete the wrong answers below*.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: The answer is **`dplyr::filter`**

The function `dplyr::select()` selects columns, not rows, and the function `dplyr::arrange()`orders rows, but does not remove any. By contrast `dplyr::filter` will select only those rows meeting the filter criteria, and will thus return less than or equal to the number of current rows.
:::

-   **dplyr::select()**
-   **dplyr::arrange()**
-   **dplyr::filter**

## Q-3

If I join the *two* tables below as follows:

``` r
dplyr::????_join(employees, departments, by = "department_id")
```

which type of join would include **employee_name == Moe Syzslak**?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: the answer is `left_join`

Inner join will return all the rows with common **department ID**, and since **Moe Syzslak** has a NA **department ID**, with no match in the **department ID table**,his name won't appear in the result of the join.

Right join will return the **departments** table and all the rows of **employees** with **department ID** in common with the **departments** table, and since Moe Syzslak has a NA **department ID**, with no match in the **department ID table**,his name won't appear in the result of the join.

Left join will return the **employees** table and all the rows of **departments** with **department ID** in common with the **employees** table. Since Moe Syzslak appears in the **employees table** his name will appear in the result of the join. Since

See the code below.
:::

-   inner
-   left
-   right
-   all of the above

*Delete the incorrect answers*.

**employees** - This table contains each employee's ID, name, and department ID.

| id  | employee_name | department_id |
|-----|---------------|---------------|
| 1   | Homer Simpson | 4             |
| 2   | Ned Flanders  | 1             |
| 3   | Barney Gumble | 5             |
| 4   | Clancy Wiggum | 3             |
| 5   | Moe Syzslak   | NA            |

**departments** - This table contains each department's ID and name.

| department_id | department_name          |
|---------------|--------------------------|
| 1             | Sales                    |
| 2             | Engineering              |
| 3             | Human Resources          |
| 4             | Customer Service         |
| 5             | Research And Development |

```{r}
#| echo: true
#| layout-nrow: 3
tbl1 <- tibble::tribble(
~id	, ~employee_name,	~department_id
,1	,'Homer Simpson'	,4
,2	,'Ned Flanders'	  ,1
,3	,'Barney Gumble'	,5
,4	,'Clancy Wiggum'	,3
,5	,'Moe Syzslak'	  ,NA
)

tbl2 <- tibble::tribble(
~department_id	,~department_name
,1	,"Sales"
,2	,"Engineering"
,3	,"Human Resources"
,4	,"Customer Service"
,5	,"Research And Development"
)

print('left_join'); dplyr::left_join(tbl1,tbl2,by = "department_id")
print('right_join'); dplyr::right_join(tbl1,tbl2,by = "department_id")
print('inner_join'); dplyr::inner_join(tbl1,tbl2,by = "department_id")

```

## Q-4

Give two questions you might ask of the data during exploratory data analysis.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: there are many!

You might ask:

-   Is there missing data, and if so which columns/rows have missing data
-   pick any two columns; can I see a relationship between them by plotting
-   how are the numerical variables distributed
-   how are the categorical variables encoded
-   how many rows and columns are in the data set.
-   ...
:::

1.  \_\_\_

2.  \_\_\_

## Q-5

If you thought your data had seasonality, what type of feature might you add to your predictive variables?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: I'll accept 1,2,3,or 4

Lag variables can be used as a predictor that captures seasonality, if you pick the right lag. A sum of basis functions like `sin()` and `cos()` are often used to capture seasonality, Finally, date-part features are also frequently used to capture seasonality in the data, e.g. for seasonality of sale volumes, a month-of-year feature can be a good predictor.
:::

1.  lag variables
2.  basis functions
3.  date-part variables
4.  all of the 1,2,3
5.  none of 1,2,3

*Delete the incorrect answers*.

# Quiz-1 (part 2)

## Q6

Write code to determine the number of **species** of penguin in the dataset. How many are there?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
#| echo: true
#| layout-nrow: 2
palmerpenguins::penguins %>% 
  dplyr::distinct(species)

# == OR ==
palmerpenguins::penguins$species %>% 
  unique() %>% length()
```
:::

## Q7

Using one of the packages we discussed in class write code to perform EDA on the data

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION:

```{r}
#| echo: true
palmerpenguins::penguins %>% DataExplorer::plot_intro()
```

```{r}
#| echo: true
#| layout-nrow: 3
# == OR ==
palmerpenguins::penguins %>% skimr::skim()
```
:::

## Q8

Write code to add a column that counts the number of penguins in each `species-island` group.

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: 5 species-island groups

```{r}
#| echo: true
palmerpenguins::penguins %>% 
  dplyr::group_by(species, island) %>% 
  dplyr::mutate(count = dplyr::n(), .after = species) %>% 
  dplyr::distinct(species, count)
```

```{r}
#| echo: true
# == OR ==
palmerpenguins::penguins %>% 
  dplyr::count(species, island)  # not discussed in class
```
:::

## Q9

Finish the code below to explore the distribution of flipper lengths among species. Which species has the longest flippers on average?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: Gentoo has the longest flippers on average

```{r}
#| warning: false
#| message: false
#| echo: true
flipper_hist <- ggplot(data = palmerpenguins::penguins, aes(x = flipper_length_mm)) +
  geom_histogram(aes(fill = species), 
                 alpha = 0.5, 
                 position = "identity") +
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "Penguin flipper lengths")

flipper_hist
```
:::

## Q10

Write code to eliminate any rows that contain `NA` values. How many rows were left?

::: {.callout-note appearance="simple" icon="false"}
## SOLUTION: 344 - 333 = 11 rows removed

```{r}
#| echo: true
palmerpenguins::penguins %>% 
  tidyr::drop_na()
```
:::

# Grading (10 pts)

| **Part**                | **Points** |
|:------------------------|:----------:|
| **Part 1 - Conceptual** |     5      |
| **Part 2 - Applied**    |     5      |
| **Total**               |     10     |
